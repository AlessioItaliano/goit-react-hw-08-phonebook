{"version":3,"file":"static/js/722.bd9d3586.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contactForm/ContactForm.styled.jsx","components/contactForm/ContactForm.jsx","components/contactsFilter/ContactsFilter.styled.jsx","components/contactsFilter/ContactsFilter.jsx","components/modal/Modal.styled.jsx","components/modal/Modal.jsx","components/updateForm/UpdateForm.styled.jsx","components/updateForm/UpdateForm.jsx","components/contactList/ContactList.styled.jsx","components/contactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsFilter = state => state.filter.value;\n\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const AddContactForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 400px;\n  padding: 12px;\n  background-color: #efefef;\n  border: 1px solid blue;\n`;\n\nexport const AddContactFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 15px;\n  margin-bottom: 10px;\n  color: black;\n  font-size: 20px;\n`;\n\nexport const AddContactFormInput = styled.input`\n  padding: 8px 12px;\n  cursor: pointer;\n`;\n\nexport const AddContactFormBtn = styled.button`\n  padding: 8px 12px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 10px;\n  border: 1.5px solid black;\n  font-size: 21px;\n  :hover {\n    background: linear-gradient(skyblue, 30%, lightgreen);\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport {\n  AddContactForm,\n  AddContactFormLabel,\n  AddContactFormInput,\n  AddContactFormBtn,\n} from './ContactForm.styled';\n\nimport Notiflix from 'notiflix';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(({ name }) => name.toLowerCase() === userName.toLowerCase())\n    ) {\n      return Notiflix.Notify.failure(`${userName} is already in contacts`);\n    }\n\n    dispatch(addContact({ name: userName, number: userNumber }));\n    setUserName('');\n    setUserNumber('');\n  };\n\n  return (\n    <AddContactForm onSubmit={onSubmit}>\n      <AddContactFormLabel>Name</AddContactFormLabel>\n      <AddContactFormInput\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={userName}\n        onChange={e => setUserName(e.target.value)}\n      />\n      <AddContactFormLabel>Number</AddContactFormLabel>\n      <AddContactFormInput\n        type=\"tel\"\n        name=\"phone\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={userNumber}\n        onChange={e => setUserNumber(e.target.value)}\n      />\n      <AddContactFormBtn type=\"submit\">Add contact</AddContactFormBtn>\n    </AddContactForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactsFilterForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 15px;\n  width: 400px;\n  padding: 12px;\n  background-color: #efefef;\n  border: 1px solid;\n  border-color: blue blue transparent blue;\n`;\n\nexport const ContactsFilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 15px;\n  margin-bottom: 10px;\n  color: black;\n  font-size: 20px;\n`;\n\nexport const ContactsFilterInput = styled.input`\n  padding: 8px 12px;\n  cursor: pointer;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/contacts/filterSlice';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\n\nimport {\n  ContactsFilterForm,\n  ContactsFilterLabel,\n  ContactsFilterInput,\n} from './ContactsFilter.styled';\n\nconst ContactsFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const filterContacts = ({ currentTarget: { value } }) => {\n    const normalizedValue = value.toLowerCase().trim();\n    dispatch(setFilterContacts(normalizedValue));\n  };\n\n  return (\n    <ContactsFilterForm>\n      <ContactsFilterLabel>Find contact by name</ContactsFilterLabel>\n      <ContactsFilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={filterContacts}\n      />\n    </ContactsFilterForm>\n  );\n};\n\nexport default ContactsFilter;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(138.13deg, #22343c75 25.87%, #1f2e3572 100%);\n  z-index: 1200;\n`;\n\nexport const ModalContent = styled.div`\n  border-radius: 25px;\n  overflow: hidden;\n\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n\n  padding: 30px;\n  background-color: #f9f9f9;\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { ModalContent, Overlay } from './Modal.styled';\n\nconst Modal = ({ children, onCloseModal }) => {\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, [onCloseModal]);\n\n  const handleBackdropClick = ({ target, currentTarget }) => {\n    if (currentTarget === target) {\n      onCloseModal();\n    }\n  };\n\n  return (\n    <Overlay onClick={handleBackdropClick}>\n      <ModalContent>{children}</ModalContent>\n    </Overlay>\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 400px;\n  padding: 12px;\n  background-color: #efefef;\n  border: 1px solid blue;\n\n  border-radius: 10px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 15px;\n  margin-bottom: 10px;\n  color: black;\n  font-size: 20px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 8px 12px;\n  cursor: pointer;\n`;\n\nexport const FormBtn = styled.button`\n  padding: 8px 12px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 10px;\n  border: 1.5px solid black;\n  font-size: 21px;\n  background: linear-gradient(skyblue, 90%, grey);\n  :hover {\n    background: linear-gradient(skyblue, 30%, lightgreen);\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, updateContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\n\nimport { Form, FormLabel, FormInput, FormBtn } from './UpdateForm.styled';\n\nconst UpdateForm = ({ onCloseModal, id }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(({ name }) => name.toLowerCase() === userName.toLowerCase())\n    ) {\n      return Notiflix.Notify.failure(`${userName} is already in contacts`);\n    }\n\n    const updatedContact = {\n      contactId: id,\n      name: userName,\n      number: userNumber,\n    };\n\n    dispatch(updateContact(updatedContact))\n      .then(() => {\n        dispatch(fetchContacts());\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong, please try again');\n      });\n\n    setUserName('');\n    setUserNumber('');\n    onCloseModal();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormLabel>Name</FormLabel>\n      <FormInput\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={userName}\n        onChange={e => setUserName(e.target.value)}\n      />\n      <FormLabel>Number</FormLabel>\n      <FormInput\n        type=\"tel\"\n        name=\"phone\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={userNumber}\n        onChange={e => setUserNumber(e.target.value)}\n      />\n      <FormBtn type=\"submit\">Update contact</FormBtn>\n    </Form>\n  );\n};\n\nexport default UpdateForm;\n","import styled from '@emotion/styled';\n\nexport const ContactListUl = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 400px;\n  padding: 12px;\n  margin-top: 0px;\n  background-color: #efefef;\n  border: 1px solid;\n  border-color: transparent blue blue blue;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const ContactButton = styled.button`\n  padding: 5px 20px;\n  font-size: 14px;\n  border-radius: 10px;\n  border: 1px solid;\n  :hover {\n    background-color: skyblue;\n  }\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\nexport const ButtonsBox = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 5px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport Modal from 'components/modal';\nimport UpdateForm from 'components/updateForm';\nimport { fetchContacts, deleteContact } from 'redux/contacts/operation';\nimport Loader from 'components/loader';\n\nimport {\n  selectFilteredContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nimport {\n  ContactListUl,\n  ContactItem,\n  ContactButton,\n  Title,\n  ButtonsBox,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = e => {\n    dispatch(deleteContact(e.currentTarget.id));\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [updateId, setUpdateId] = useState('');\n\n  const toggleModal = () => {\n    setIsShowModal(prev => !prev);\n  };\n\n  const handleOpenUpdateModal = contactId => {\n    setUpdateId(contactId);\n    toggleModal();\n  };\n\n  return (\n    <ContactListUl>\n      {isLoading && !error ? (\n        <Loader />\n      ) : contacts.length === 0 && !error ? (\n        <Title>Your contact book is empty</Title>\n      ) : (\n        <>\n          {contacts.map(contact => (\n            <ContactItem key={contact.id}>\n              {contact.name}: {contact.number}\n              <ButtonsBox>\n                <ContactButton\n                  type=\"button\"\n                  onClick={handleDelete}\n                  id={contact.id}\n                >\n                  Видалити\n                </ContactButton>\n                <ContactButton\n                  type=\"button\"\n                  onClick={() => handleOpenUpdateModal(contact.id)}\n                  id={contact.id}\n                >\n                  Оновити\n                </ContactButton>\n              </ButtonsBox>\n            </ContactItem>\n          ))}\n          {isShowModal && (\n            <Modal\n              children={\n                <>\n                  <Title>Update your contact</Title>\n                  <UpdateForm onCloseModal={toggleModal} id={updateId} />\n                </>\n              }\n              onCloseModal={toggleModal}\n            />\n          )}\n        </>\n      )}\n    </ContactListUl>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactForm from 'components/contactForm';\nimport ContactsFilter from 'components/contactsFilter';\nimport ContactList from 'components/contactList';\nimport { fetchContacts } from 'redux/contacts/operation';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <ContactsFilter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectContactsFilter","filter","value","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","item","name","toLowerCase","includes","AddContactForm","styled","_templateObject","_taggedTemplateLiteral","AddContactFormLabel","_templateObject2","AddContactFormInput","_templateObject3","AddContactFormBtn","_templateObject4","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","userNumber","setUserNumber","_jsxs","onSubmit","e","preventDefault","some","_ref","Notiflix","concat","addContact","number","children","_jsx","type","pattern","title","required","onChange","target","ContactsFilterForm","ContactsFilterLabel","ContactsFilterInput","normalizedValue","currentTarget","trim","setFilterContacts","Overlay","ModalContent","onCloseModal","useEffect","handleKeydown","code","window","addEventListener","removeEventListener","onClick","_ref2","Form","FormLabel","FormInput","FormBtn","id","updatedContact","contactId","updateContact","then","fetchContacts","catch","ContactListUl","ContactItem","ContactButton","Title","ButtonsBox","_templateObject5","handleDelete","deleteContact","isShowModal","setIsShowModal","updateId","setUpdateId","toggleModal","prev","Loader","length","_Fragment","map","contact","Modal","UpdateForm","ContactForm","ContactsFilter","ContactList"],"sourceRoot":""}